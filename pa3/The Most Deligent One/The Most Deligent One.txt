一. 所使用数据结构与算法的构思、原理和实现要点。
1.所使用的数据结构：散列表(hash table)
2.算法的构思、原理和实现要点：首先想到的是先将所有的姓名都逐个保存下来，再通过strcmp()函数按照字典序对所有的名字进行排序，接着从第一个名字开始遍历整个名字集合，可以得到各个名字的出现次数，遍历的过程中不断更新最大值信息这样
是一定能够找到正确答案的。由于题干中有空间限制，于是进行一下估算，最坏的情况下2*10^6个名字，如果每个名字是8个字符，大概是15.3MB，虽然好像是满足20MB的条件，但是经过测试提交空文件也会占用12MB的空间，因此这种方法在最坏情况下是
不能满足要求的。重新审题发现实际同学总数是不超过10000的，因此只需要构造一个散列表，根据姓名字符串直接确定散列表的入口，如果字符串的散列函数取得好的话对于每一次名字的查找时间复杂度的期望值都是O(1),并且估算一下空间耗费不超过1MB。
于是采取散列的方式来解决此题，对于关键码冲突的情况，可以将按照先后次序通过链表的形式依次存储在同一个关键码下，每个姓名在存储的时候同时记录一个出现的次数，这样每次有一个新的名字读入的时候就能够相应地更新出现最多次数的名字的信息。
实现要点：
1.不能一次性将所有的名字读入，这样必然会要开一个相同规模的内存区域来临时存储，空间会不够用，可以逐个读入并且操作
2.由于题目中还有时间要求，因此需要找到一个性能较高的hash函数，尽可能减少冲突的情况
二. 完成过程中遇到的问题，排除问题的主要过程、使用的方法和技巧，以及参考资料。
问题1：使用排序法的时候空间爆了，只能通过5成测试中的7个测试点，其余爆空间，于是采用散列的方式重新做了这道题
问题2:自己写的字符串的散列函数效率不够高，时间花费最多的超过了1s，于是学习了几种已有的常用字符串hash函数，并且采用了BKDRHash函数，性能提高到了300ms的水平
参考资料：
1.https://baike.baidu.com/item/hash%E5%87%BD%E6%95%B0/10555888?fr=aladdin
做这题的时候课上还没学散列，就先学习了散列中的hash函数的相关知识
2.http://blog.csdn.net/jaihk662/article/details/57177536
学习了mooc课堂中重名剔除(Deduplicate)一题中散列的运用
3.http://blog.csdn.net/djinglan/article/details/8812934
查看了经典的几种字符串Hash函数算法
4.https://www.cnblogs.com/ldy-miss/p/6099454.html
使用了现有的效率较高BKDRHash函数的代码
三. 时间和空间复杂度的估算。
1.时间复杂度估算
读入名字的总个数，并且初始化一些变量，时间复杂度为O(1);
    int n;
	char str[9];
	scanf("%d", &n);
	int pos = 0;//用来记录后续新插入节点的数量
	int max = 0;//记录最大出现次数
	char maxname[9] = "";//记录出现最多次数的人名
接下来逐个读入名字信息，根据BKDRHasn函数计算出每个名字的关键码，根据关键码寻秩访问，若该节点为空则直接插入，如果该节点不为空则通过在链表中顺序比对，若存在则更新出现次数即可，不存在则需要新建一个
节点挂接在末端。如果散列函数足够好，每次插入或者是更新都是常数次内完成，期望的时间复杂度为O(1),n循环则时间复杂度为O(n);
    for (int i = 0; i < n; i++) {
		scanf("%s", str);
		int key = (int)BKDRHash(str);
		if (strcmp(node[key].name, empty) == 0) {//根节点如果为空，则先在根节点上赋值，次数仍然为1不改动
			strcpy(node[key].name, str);
			if (node[key].times > max) {
				max = node[key].times;
				strcpy(maxname, node[key].name);
			}
		}
		else {//根节点上已经非空的情况,则要从根节点开始逐一比对
			if (strcmp(node[key].name, str) == 0) {//如果根节点直接找到
				node[key].times++;
				if (node[key].times > max) {
					max = node[key].times;
					strcpy(maxname, node[key].name);
				}
			}
			else {//根节点没有的话则要顺着根节点一直找到next为空
				Node* temp = &node[key];
				bool exist = false;
				while ((*temp).nextnode() != nullptr) {
					temp = (*temp).nextnode();
					if (strcmp((*temp).name, str) == 0) {
						exist = true;
						(*temp).times++;
						if ((*temp).times > max) {
							max = (*temp).times;
							strcpy(maxname, (*temp).name);
						}
						break;
					}
				}
				if (exist == false) {//如果没有找到同名的，插入一个新的节点
					strcpy(sup[pos].name, str);//挂载新节点的时候，由于必然相应的链表表头已经元素非空，因此最大出现次数一定不小于1，不用更新最大值信息
					(*temp).insertafter(&sup[pos]);
					pos++;
				}
			}
		}
	}
输出的时间复杂度为O(1);
    printf("%s %d", maxname, max);
因此总体时间复杂度T(n)=O(1)+O(n)+O(1)=O(n);但是这是期望意义下的时间复杂度，前提是散列函数的性能足够优越
2.空间复杂度的估算
由于散列表的规模是根据互异的姓名个数确定的，也就是同学的总数m，因此散列表的空间复杂度为O(m);
其余的用来单次存储读入的姓名的字符串数组之类的临时变量的空间复杂度视为O(1);
因此总体空间复杂度=O(m)+O(1)=O(m);其中m为同学的总数，也就是互异的名字的个数
四.理论分析与实测效果的吻合程度
1.采用排序法能够通过部分测试点
2.采用好的hash函数能够明显降低运行所需时间
