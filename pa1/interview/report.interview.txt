一. 所使用数据结构与算法的构思、原理和实现要点。
1.所使用的数据结构：循环链表（list）
2.算法的构思、原理和实现要点：
题干中涉及到n个人的座次位置，并且结果需要按照规定的方向输出，牵涉到n个物理位置连续变量的输出，最首先联想到的是用向量结构。但是深入分析发现，若采
用向量的结构，当第i个人已经落座，第i+1个人插入的时候，则需要将向量的首元素变成新插入的元素，剩下的元素则需要相应的向后变换一个位次，每轮插入涉及
的下标变换次数是O(n)，外层循环有n轮流，因此整体时间复杂度估计为O(n²)。复杂度非常高，因此向量结构并不适合这种情况。
由于第i+1次插入的人总是排在第i个人之后，于是整个数据结构和循环链表相对应。每个插入的人可以视为一个item，每个item中不光包含应聘者的id信息，id信息
可以用一个数组a单独保存，每个item中还存储的信息有指向下一个人将要插入的位置，和链表中指向下一个节点的指针的功能相似，将下一个插入的人的前驱存储在
另外一个数组b中,a和b下标相同的两个元素共同构成一个插入者item的信息。规定链表最后一个元素指向的下一个节点为链表的首元素，则可以完成整个链表的循环。
每次插入的操作，只涉及找到下一个人插入的节点，对应链表中插入新节点的过程，整个过程数是常数级别的，每轮循环的时间复杂度是O(1),总体时间复杂度为O(n)。
实现要点则在于题干中“从最后一个插入者开始，顺时针经过m个人”这一个步骤，对应了b数组中的自身调用，反复用b[b[i]]可以达到“经过”的效果。
二. 完成过程中遇到的问题，排除问题的主要过程、使用的方法和技巧，以及参考资料。
问题1：如何用两个数组完成插入的操作过程
第i个插入的人若找到了插入位置的前驱元素下标为k，插入之前若k的后继元素下标为j,则只需要将b[k]=i,b[i]=j。即将前驱元素的后继更新为新插入元素的下标，
新插入元素的后继则继承前驱之前的后继。
问题2：第一次编码的时候，没有思考清楚如何正确地查找到即将插入元素的前驱。将b数组的首元素记录插入位置的变量pos初始化为0后，第i个人插入位置企图用
pos=(pos+m)%(i-1)来计算，题干中的测试数据是n=5,m=3,此时提交代码只有第一组元素结果通过。于是经过单步调试查找错误原因，发现当m=3时，一直插入到第
七个人时都能保持正确结果，插入到第八个人的时候，由于插入位置已经经过了一轮循环，pos的结果发生了错误。
于是考虑重新查找每次插入的pos，由于数组b中记录的是每个插入元素当时的后继元素的下标，比如若b[0]=x,则代表0号元素的后继为x号元素，则b[x]=y,又能表示
x号元素的后继为y号元素。所以为了找到经过的顺时针第m号元素的下标，只用使用m-1次迭代b[i]即可。
参考资料：
三. 时间和空间复杂度的估算。
1.时间复杂度估算
    int n, m;
	static int size = 0; 
	static int pos = 0;  
	static int j = 0;
	int k;
	cin >> n >> m;
	int *a = new int[n]; 
	int *b = new int[n];
	int *c = new int[n];
	int *d = new int[n];
定义变量类型的步骤均在常数步骤内便可完成，可视为O(1)
for (int i = 0; i < n; i++) {
		cin >> a[i];
		size = size + 1;
		if (size == 1)
			b[0] = 0;
		else {
			pos = b[size - 2];
				pos = b[pos];
			}
			j = pos;
			if (b[j] == 0) {
				b[j] = i;
				b[i] = 0;
			}
			else {
				b[i] = b[j];
				b[j] = i;
			}
		}
	}
每轮循环的操作对应了插入元素的操作，每轮插入通过b数组的m-1次b[i]的自身迭代，可以找到新的插入位置。之后常数步骤更改后继元素的时间复杂度可视为O(1),
总共有n轮循环，时间复杂度为n*(O(m)+O(1))=n*O(m)+O(n)
    c[0] = a[n - 1];
	k = b[n - 1];
	for (int j = 1; j < n; j++) {
		c[j] = a[k];
		k = b[k];
	}
这几行代码是按照元素的先后次序关系存储到一个新的数组中，对应的是以最后一个人为开始，逆时针遍历所有元素，时间复杂度为O(n)
    for (int i = 1; i < n; i++) {
		d[i] = c[n - i];
	}
	for (int i = 0; i < n; i++) {
		cout << d[i] << " ";
	}
最后将元素按照顺时针遍历链表，时间复杂度为O(n)
因此总体时间复杂度T(n)=O(1)+n*O(m)+O(n)+O(n)+O(n)=n*O(m)+O(n)
2.空间复杂度的估算
所有插入人员视为一个item，信息分别存储在了两个长度为n的数组中，最后为了顺时针输出又构造了两个长度为n数组
因此空间复杂度为O(n)+O(n)+O(n)+O(n)=O(n)

四.理论分析与实测效果的吻合程度
实测的各个测试点的所需时间差别并不大，与时间复杂度的估算结果相吻合


