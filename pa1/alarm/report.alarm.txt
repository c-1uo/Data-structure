一. 所使用数据结构与算法的构思、原理和实现要点。
1.所使用的数据结构：向量（vector）
2.算法的构思、原理和实现要点：对于输入数据的n行直线，将直线的x坐标与y坐标分别存放在两个不同的数组a和b中，且数组下标一一对应。因此对于第i条直线的直线方程可以表示为
b[i]*x+a[i]*y-a[i]b[i]=0，再将输入的m个点的横纵坐标分别存放在另外两个数组x和y中。点所在区域的确定对应了查找的算法，对应的n+1个区域则对应了查找的总体范围。而直
线的端点坐标是单调递增的，因此只需要使用课堂上学习的已排序向量的查找算法即可。查找算法的种类选择据定了查找所需要的时间。因此整个过程分别使用了顺序查找和二分查找的
C版本进行代码的编写。
二. 完成过程中遇到的问题，排除问题的主要过程、使用的方法和技巧，以及参考资料。
问题1：采用顺序查找的方法进行50%judge的时候，第10组数据会超时，输入的时候均采用了加大缓冲区和用scanf输入的方法，因此排除超时是非算法原因导致的。采取优化算法的方
式，由顺序查找改成二分查找C版本。
问题2：若将所有的坐标元素的整数类型设置为int，提交代码进行judge后，只有第一组数据显示正确，剩下的9组数据均显示运算错误。但是代码原理和算法均经过了校核，所以在题目
文本的提示中找到了错误原因：int类型的数据在乘法的运算中有可能上溢。因此采取的解决办法是将代码中的整数数据类型由int全部修改成了long int，包括循环语句中用来判定循环
是否继续的局部变量。
问题3：第一次生硬地照搬二分查找C版本会使得每个点在最后的输出结果与正确的结果都相差1，因此重新考察算法的循环的终止条件，修改了返回值，由--lo修改为lo本身。
参考资料：老师上传讲义的二分查找的C版本的代码。
三. 时间和空间复杂度的估算。
1.时间复杂度估算
定义数据类型变量n和m的步骤均视为O(1),再动态内存分配5个数组，将n组直线的两个坐标值分别存储在数组中
    long int *a = new long int[n];
	long int *b = new long int[n];
	long int *x = new long int[m];
	long int *y = new long int[m];
	long int *z = new long int[m];
	for (long int i = 0; i < n; i++) {
		scanf("%ld %ld", &a[i], &b[i]);
	}
这一步循环赋值的过程时间复杂度视为O(n)
for (long int i = 0; i < m; ++i) {
		scanf("%ld %ld", &x[i], &y[i]);
		z[i] = binSearch(a, b, x[i], y[i], 0, n - 1);
	}
这一个循环结构中每一次循环赋值两次时间复杂度可视为O(1)，找到单个点所在的区域对应二分查找算法，所需时间为O(logn),总共进行m次循环，总体所需要时间为m*(0(logn)+2*O(1))
for (int i = 0; i < m; i++) {
		printf("%ld\n", z[i]);
	}
最后将整体的各个坐标所属的区域输出需要的时间为O(n)，所以最后将时间相加后，复杂度为m*O(logn)+O(n)
如果采用顺序查找的算法，时间复杂度为m*O(n),当n数值较大时，所需时间远超过二分查找
2.空间复杂度的估算
所有的数据变量都存储在了5个动态内存分配出来的数组中，因此空间复杂度为3*O(n)+2*O(m)+O(1)=O(n)
四.理论分析与实测效果的吻合程度
使用顺序查找的算法与使用二分查找的算法在测试前八组数据的时候差异不大，应该是数据规模不够大的原因。第九组数据二分查找使用了22ms，而顺序查找花费207ms。第十组顺序查找更
是直接超时。与理论分析相吻合。

