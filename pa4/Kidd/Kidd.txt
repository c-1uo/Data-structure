一. 所使用数据结构与算法的构思、原理和实现要点。
1.所使用的数据结构：线段树（segment tree）
2.算法的构思、原理和实现要点：因为扑克牌的数量可能非常大，因此按照4-1-1中根据扑克牌总数，以单位长度为间隔建线段树的方法会爆空间，因此需要重新考虑线段树中每个节点中保存的信息。注意到实际上在1-n这n个数字中
实际上在查询和翻转操作命令中出现的最多只能有2*m个。不妨假设所有的m条命令中最小的数字为min，最大的数字为max，实际上被操作的扑克牌只在闭区间[min,max]中，而这个[min,max]区间必定是这m条命令分别对应的线段区间的并集。
因此只需要通过对这m个命令中涉及的2*m个顶点进行排序并且去重，使得整个[min，max]被分割成若干个子线段，并且这些子线段之间不相交。那么在线段树的叶子节点中只需要存储这些基础线段区间(elementary interval)的左右
端点即可，两个端点之间的那些扑克牌的信息由该节点统一维护，这样就解决了空间的问题。对于每一次的无论是翻转还是查询操作对应的区间，实质上都是将命令对应的线段在线段树中从根节点出发做分解，过程具体为和各个节点的左右端点
进行比较，一旦发现能够完全包含的区间或者没有交集的节点区间，便抵达递归基；否则的话则为相交但不包含的情况，则递归进入该节点的左右子树中分解。无论是翻转和计数的操作，都只需要对整个分解路径上的那些正则子集线段节点的信息做修改即可。
实现要点：1.对输入的m条命令中的2*m个顶点做预处理(排序和去重)，并且考虑到基础线段区间(elementary interval)之间应该是互不相交的,因此可以将每条命令的左端点在输入的基础上减一使得区间变成左开右闭。即将[a,b]区间
用(a-1,b]代替，这两个区间中包含的整数个数是相等的。2.线段树的递归建树过程。3.给每个节点都需要增加懒标记，方便在翻转过程更新节点信息的时候不需要对全局节点进行更新而是局部更新，避免算法退化成为蛮力算法。
二. 完成过程中遇到的问题，排除问题的主要过程、使用的方法和技巧，以及参考资料。
问题1：在使用懒标记之前。对于翻转操作的修改，每一次碰到属于当前查询区间的正则子集的线段树节点v，都立马对以v为根子树中所有节点进行信息更新并且将该节点压入一个维护栈。所有属于正则子集的线段节点入栈后，取栈顶和栈底的两个节点做向上的信息更新(向上
更新到全树根节点为止)。但是这样会超时，因为退化成了蛮力算法。解决办法是采取懒标记的方法，对当前节点记录一下前一次操作是否被翻转过，前一次被标记为翻转的时候，就需要将懒标记下压一层。这样相当于大规模地修改了扑克牌的信息的同时控制了时间成本。

参考资料：
1.http://www.xuetangx.com/courses/course-v1:TsinghuaX+70240183x_1+sp/courseware/f21f5d119f0b4189b5fdaf9bcc45714d/70140e0ff13243db8c5910f4ce96552a/
参考了mooc《计算几何》第八章windowing query中segment tree这一节的视频
2.https://www.cnblogs.com/TheRoadToTheGold/p/6254255.html
参考了上面这篇博客中对于区间修改中懒标记的介绍
3.参考了pa-book中的setvbuf函数代码

三. 时间和空间复杂度的估算。
1.时间复杂度估算
定义变量和通过循环给变量赋值的时间视为O(m);
    int n, m;
    segment* s = new segment[m];
	char* order = new char[m + 1];//用%s读取字符的时候要预留出截止符的空间
	int* vertex = new int[2 * m];//存放m条命令中所有的线段两个端点
	scanf("%d %d", &n, &m);
	for (int i = 0; i < m; i++) {
		scanf("%s %d %d", &order[i], &((s + i)->left), &((s + i)->right));
	}
把线段区间处理成左开右闭的，时间复杂度O(m);
for (int i = 0; i < m; i++)//因为语义上规定区间都是左开右闭的，所以对线段的左边都减一
		s[i].left--;
接下来对所有线段区间的端点进行排序和去重，时间复杂度为O(mlogm)+O(m);
    for (int i = 0; i < m; i++) {
		vertex[2 * i] = s[i].left;
		vertex[2 * i + 1] = s[i].right;
	}
	qsort(vertex, 2 * m, sizeof(vertex[0]), cmp);//然后对2*m个顶点去重
	int* unique = new int[2 * m];
	int count = 0;
	for (int i = 0; i < 2 * m;) {
		unique[count++] = vertex[i];
		int j = i;
		while (j < 2 * m&&vertex[j] == vertex[i])
			j++;
		i = j;
	}
将去重后的顶点组织成为若干个基础线段区间(elementary interval)，时间复杂度为O(m)；
    segment* EI = new segment[count - 1];//得到基础的线段区间(elementary interval)，也都是左开右闭的
	for (int i = 0; i < count - 1; i++) {
		EI[i].left = unique[i];
		EI[i].right = unique[i + 1];
	}
接下来是建线段树的操作，是一个EI向上归并的过程，这一步时间复杂度满足递推式t(m)=2*t(m/2)+O(1);解得t(m)=O(m);
    int midpoint = (0 + count - 2) / 2;
	root = new segnode();
	buildSegtree(0, midpoint, count - 2, EI, root);//建树
	void buildSegtree(int lo, int mi, int hi, segment* elem, segnode* v) {
	if (lo == hi) {//当只有一个元素的时候为递归基
		v->lb = elem[lo].left;
		v->rb = elem[lo].right;
		v->size = elem[lo].right - elem[lo].left;
		v->upsize = elem[lo].right - elem[lo].left;//初始化的时候扑克牌全部为正的
		return;
	}
	else {
		int mil = (lo + mi) / 2;//不断取中位数
		int mir = (mi + 1 + hi) / 2;
		segnode* templeft = new segnode();
		v->lc = templeft;//完成正向和反向的连接
		templeft->parent = v;
		segnode* tempright = new segnode();
		v->rc = tempright;
		tempright->parent = v;
		buildSegtree(lo, mil, mi, elem, v->lc);
		buildSegtree(mi + 1, mir, hi, elem, v->rc);
		v->lb = v->lc->lb;//更新父亲节点的线段信息即扑克牌的数量信息
		v->rb = v->rc->rb;
		v->size = v->lc->size + v->rc->size;
		v->upsize = v->lc->upsize + v->rc->upsize;
		return;
	}
}
接下来是m次翻转或是查询操作。对于单次的翻转操作，由于在树的每一层中实际上被访问的节点不会超过四个，靠近外侧的两个分别递归，中间的两个存储下来，而其余的节点均因和待操作的区间没有交集而被剪枝，对向下递归的两个
节点的懒标记下压的操作时间成本为常数。树高为logm，因此对于单次的翻转时间复杂度和每层实际操作的节点数是成正相关的，时间复杂度为O(logm)。查询操作和翻转的实质是一样的，时间复杂度也为O(logm)。因此总的m步操作的时间复杂度为O(mlogm);
    for (int i = 0; i < m; i++) {
		if (order[i] == 'H') {
			insert(root, s + i);
		}
		else {
			num = 0;
			query(root, s + i);
			printf("%d\n", num);
		}
	}

	void insert(segnode* v, segment* e) {//对应于'H'开头的命令，相当于把边插到树里了，插入的线段被分成若干条子线段存储在树的不同节点中
	if (notcommon(v, e))//没有交集直接返回
		return;
	if (isbelong(v, e)) {//命中子集的一部分时，更新当前节点的扑克牌信息
		v->op = !(v->op);
		v->upsize = v->size - v->upsize;
		return;
	}
	if (v->op != false) {//维护左孩子和右孩子的信息，向下维护一层。这里参考了代码最开头所给博客链接中懒标记的使用方法
		v->lc->op = !(v->lc->op);
		v->rc->op = !(v->rc->op);
		v->lc->upsize = v->lc->size - v->lc->upsize;
		v->rc->upsize = v->rc->size - v->rc->upsize;
		v->op = false;
	}
	insert(v->lc, e);
	insert(v->rc, e);
	v->upsize = v->lc->upsize + v->rc->upsize;//递归处理完左右子树之后要对当前节点的扑克牌信息更新
    }

因此总体时间复杂度T(n)=O(m)+O(m)+O(mlogm)+O(m)+O(m)+O(m)+O(mlogm)=O(mlogm)+O(m)=O(mlogm);
2.空间复杂度的估算
预处理所有命令中的线段端点时构造的数组和结构体的空间复杂度视为O(m);
由于线段树的底层叶子节点数量为O(m),整棵树为一棵BBST，因此全树的节点总数也为O(m),因此全树的空间复杂度为O(m);

因此整体的空间复杂度=O(m)+O(m)=O(m);

四.理论分析与实测效果的吻合程度
在没有使用懒标记(即退化成蛮力算法时候只能通过前四个测试点)
