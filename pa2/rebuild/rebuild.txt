一. 所使用数据结构与算法的构思、原理和实现要点。
1.所使用的数据结构：二叉树（binary tree）
2.算法的构思、原理和实现要点：如果已知先序遍历和后序遍历，能唯一确定中序遍历的前提条件是该二叉树为一棵真二叉树，因为只有如此才能判断先序遍历中根节点紧跟的是左孩子还是右孩子。
解决该问题的主要思想是递归，在先序遍历中第一个出现的一定是整棵树的根节点，如果根节点有子树的话，紧接着出现的一定是左子树的根节点，在后序遍历中通过查找可以找到该左子树的根节点
并且返回该点的秩i，在后序遍历中一旦找到左子树的根节点就可以将整个后序遍历一分为二(除了最右端的整棵树的根节点)。而中序遍历也是先遍历左子树，所以整棵树的根节点在中序遍历中的秩就
应该是i+1。因为已经将整棵树一分为二，所以可以递归地进入左右两颗子树中进行同样的操作。直到一分为二后都变成单元素为止，也就是递归基为树的叶节点。
实现要点：1.设置好递归基。2.递归深入的时候先进入左子树后进入右子树。
二. 完成过程中遇到的问题，排除问题的主要过程、使用的方法和技巧，以及参考资料。
问题1：一开始思考的时候准备用构造出讲义中的一系列BinNode，并且通过节点成员中的两个指针分别指向具体的左孩子和右孩子来重构出整个二叉树。但是整个递归过程更像是数据的重新排列，只需要
针对最后的输出结果保存在一个新的数组中即可，不用提供额外的求解左孩子或者是右孩子的接口，于是代码可以得到简化。
参考资料：
1.pa-book中setvbuf函数的使用。
2.讲义05-I中的内容。
3.http://m.blog.csdn.net/wangbingcsu/article/details/49495309
在递归代码rebuild的思路上一开始非常复杂，处理不好叶子节点的判断，所给链接中这篇博客最底下的评论第三楼中看到了一个处理手法使用指针非常非常巧妙地写好了递归处理左右子树的表达式！用
指针和左右子树的大小界定出来了各个子树的规模和位置。比手动if语句判断是否为叶节点要简洁太多。
三. 时间和空间复杂度的估算。
1.时间复杂度估算
变量的定义和数据的读入，该部分的时间复杂度可视为O(1)+O(n)=O(n)
    int n;
	scanf("%d", &n);
	int *preorder = new int[n];//动态内存分配以节省空间
	int *postorder = new int[n];
	int *inorder = new int[n];
	for (int i = 0; i < n; i++) {
		scanf("%d", &preorder[i]);
	}
	for (int i = 0; i < n; i++) {
		scanf("%d", &postorder[i]);
	}
在递归的过程中需要通过i次比较才能确定根节点左子树的根节点的位置，并且还有1步插入操作。所以有
void rebuild(int *preorder, int *postorder, int *inorder, int n) {
	if (n == 1) {
		inorder[0] = preorder[0];
		return;
	}
	int i=0;
	while(postorder[i]!=preorder[1]){
		i++;
	}
	i++;
	inorder[i] = preorder[0];
	rebuild(preorder + 1, postorder, inorder, i);
	rebuild(preorder + i + 1, postorder + i, inorder + i + 1, n - i - 1);
}
rebuild(preorder, postorder, inorder, n);
输出一次时间为O(n)
    for (int i = 0; i < n; i++) {
		printf("%d ", inorder[i]);
	}
因此总体时间复杂度T(n)=O(1)+O(n)+O(n)+O(nlogn)+O(n)=O(n)+O(nlogn)

2.空间复杂度的估算
递归求解过程中每个节点都会被唯一递归到，并且开辟了三个数组分别存放先序、中序和后续的排列，所以空间复杂度为3*O(n)=O(n)。 
